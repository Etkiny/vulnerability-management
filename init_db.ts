import { Postgres } from 'database';
import { QueryTypes, Sequelize } from 'sequelize';

const dummyData = async (sequelize: Sequelize) => {
    const productData = [
        { productNumber: '5f2cfe3a', name: 'libvpx' },
        { productNumber: '4a3f9e8b', name: 'WinNMP' },
        { productNumber: '7e1d2a4b', name: 'RhinOS' },
        { productNumber: '8c9f1e3d', name: 'Smartpower' },
        { productNumber: '6b4f2e1d', name: 'Zoho ManageEngine ADSelfService Plus' },
        { productNumber: '9a5e1f2b', name: 'Audiobookshelf' },
        { productNumber: '2d4c6f3a', name: 'Minder by Stacklok' },
        { productNumber: '1a3b5e7c', name: 'Meshery' },
        { productNumber: '4b2f9d1e', name: 'Huawei Matebook D16' },
        { productNumber: '3e5c7a9f', name: 'PlyFile' },
        { productNumber: '8f1d4c3b', name: 'Mybatis' },
        { productNumber: '7c2b3e5a', name: 'JetBrains TeamCity' },
        { productNumber: '5d3a9e7b', name: 'The WPCafe' },
        { productNumber: '64ccfeeg', name: 'ColdFusion' }
    ];

    const userData = [
        {
            userNumber: '1543943054cf7023',
            name: 'Joe',
            email: 'joe@gmail.com',
            phoneNumber: '12838294942',
            password: '$2b$10$kLjCxH.DF0QoM6M3IFnUMOpLl7Ry2m9X2lDNgXYvVdvCIrDN9T0VW',
            status: 'ACTIVE'
        },
        {
            userNumber: '635dd18fd176f0f2',
            name: 'Rachel',
            email: 'rachel@gmail.com',
            phoneNumber: '14455294942',
            password: '$2b$10$AC/.3emntMGJjFVX0K.rCu0sq7JBIrOODtjQMof2pkh45j2av54tG',
            status: 'ACTIVE'
        }
    ];

    const userProductMapData = [
        { productNumber: '7e1d2a4b', userNumber: '635dd18fd176f0f2', status: 'ACTIVE' },
        { productNumber: '4b2f9d1e', userNumber: '635dd18fd176f0f2', status: 'ACTIVE' },
        { productNumber: '7c2b3e5a', userNumber: '635dd18fd176f0f2', status: 'ACTIVE' },
        { productNumber: '64ccfeeg', userNumber: '635dd18fd176f0f2', status: 'ACTIVE' }
    ];

    try {
        for (const product of productData) {
            await sequelize.query(
                `INSERT INTO "Products" ("productNumber", "name", "createdAt", "updatedAt") VALUES (:productNumber, :name, NOW(), NOW())
                ON CONFLICT ("productNumber") DO NOTHING`,
                { replacements: product }
            );
        }

        for (const user of userData) {
            await sequelize.query(
                `INSERT INTO "Users" ("userNumber", "name", "email", "phoneNumber", "password", "status", "createdAt", "updatedAt") VALUES (:userNumber, :name, :email, :phoneNumber, :password, :status, NOW(), NOW())
                ON CONFLICT ("userNumber") DO NOTHING`,
                { replacements: user }
            );
        }

        for (const map of userProductMapData) {
            const [existingMap] = await sequelize.query(
                `SELECT * FROM "userProductMap" WHERE "productNumber" = :productNumber AND "userNumber" = :userNumber`,
                {
                    replacements: { productNumber: map.productNumber, userNumber: map.userNumber },
                    type: QueryTypes.SELECT
                }
            );
            if (!existingMap) {
                await sequelize.query(
                    `INSERT INTO "userProductMap" ("productNumber", "userNumber", "status", "createdAt") VALUES (:productNumber, :userNumber, :status, NOW())`,
                    { replacements: map }
                );
            }
        }

        console.log('Dummy data inserted successfully');
    } catch (error) {
        console.error('Error inserting dummy data:', error);
    }
};

(async () => {
    console.log('DB Sync STARTING');
    try {
        await new Postgres()
            .setConfig({
                HOSTNAME: 'db' || '127.0.0.1',
                PORT: 5432,
                USERNAME: 'postgres',
                PASSWORD: 'postgres',
                SCHEMA: 'vulnerability-management',
                OPTIONS: {
                    LOGGING: console.log,
                    BENCHMARK: false,
                    MAX_CONNECTION: 100,
                    MIN_CONNECTION: 3,
                    IDLE_TIME: 5000
                }
            })
            .initializeDB(true, { logging: console.log });
        console.log('DB Sync COMPLETED');

        await dummyData(Postgres.getSequelizeInstance());

        process.exit(0);
    } catch (e) {
        console.log('DB Sync FAILED: ', e);
        process.exit(0);
    }
})();
