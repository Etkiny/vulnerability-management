import { Products } from '../entities';
import { userProductMap } from '../entities';
import { Postgres } from '../database';

class ProductRepository {
    async getUserProducts(userNumber: string): Promise<Products[]> {
        try {
            return Postgres.entities.products.findAll({
                include: [
                    {
                        model: Postgres.entities.userProductMap,
                        where: { userNumber },
                        required: true
                    }
                ]
            });
        } catch (error) {
            console.error('Error in ProductRepository.getUserProducts:', error);
            throw new Error('Error fetching user products');
        }
    }

    async getAllProducts(): Promise<Products[]> {
        try {
            return await Postgres.entities.products.findAll();
        } catch (error) {
            console.error('Error in ProductRepository.getAllProducts:', error);
            throw new Error('Error fetching products');
        }
    }

    async getProductInfo(productNumber: string): Promise<Products | null> {
        try {
            const productInfo = await Postgres.entities.products.findOne({ where: { productNumber } });
            return productInfo;
        } catch (error) {
            console.error('Error in ProductRepository.getProductInfo:', error);
            throw new Error('Error fetching product');
        }
    }

    async createUserProductMap(userNumber: string, productNumber: string): Promise<userProductMap> {
        try {
            return await Postgres.entities.userProductMap.create({
                userNumber,
                productNumber,
                status: 'ACTIVE'
            });
        } catch (error) {
            console.error('Error in UserProductMapRepository.createUserProductMap:', error);
            throw new Error('Error creating UserProductMap');
        }
    }

    async getExistingProducts(userNumber: string, productNumber: string): Promise<Products[]> {
        try {
            return await Postgres.entities.userProductMap.findOne({ where: { userNumber, productNumber } });
        } catch (error) {
            console.error('Error in UserProductMapRepository.getExistingProducts:', error);
            throw new Error('Error getting existing products');
        }
    }
}

export default new ProductRepository();
