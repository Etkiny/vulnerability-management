import userRepository from '../repositories/user.repository';
import vulnerabilityRepository from '../repositories/vulnerabilities.repository';
import NotificationsRepository from '../repositories/notifications.repository';
import productRepository from 'repositories/product.repository';
import { email as emailHelper } from 'helpers';

class NotificationService {
    async sendNotification(userId: number, vulnerabilityId: number, productName: string) {
        const user = await userRepository.getUser(userId);
        const vulnerability = await vulnerabilityRepository.getVulnerability(vulnerabilityId);

        if (!user || !vulnerability) {
            throw new Error('User or Vulnerability not found');
        }

        await NotificationsRepository.createNotification(userId, vulnerabilityId);

        const emailData = {
            to: user.email,
            subject: 'New Vulnerability Detected',
            html: `<strong>A new vulnerability affecting your products has been detected. CVE ID: ${vulnerability.cveId}</strong><br><br><strong>Product Name:</strong> ${productName}<br><br><strong>Vulnerability:</strong> ${vulnerability.description}`
        };

        await emailHelper.sendEmail(emailData.to, emailData.subject, emailData.html);
    }

    async checkAndSendNotifications() {
        const users = await userRepository.getAllUsers();
        const vulnerabilities = await vulnerabilityRepository.getRecentVulnerabilities();

        for (const user of users) {
            const userProducts = await productRepository.getUserProducts(user.userNumber);

            for (const product of userProducts) {
                const productVulnerabilities = vulnerabilities.filter((vulnerability) =>
                    vulnerability.description.includes(product.name)
                );

                for (const vulnerability of productVulnerabilities) {
                    await this.sendNotification(user.id, vulnerability.id, product.name);
                }
            }
        }
    }
}

export default new NotificationService();
