import ProductRepository from '../repositories/product.repository';
import userRepository from 'repositories/user.repository';
import { Products } from '../entities';
import vulnerabilityRepository from '../repositories/vulnerabilities.repository';

class ProductService {
    async getUserProducts(userNumber: string): Promise<Products[]> {
        try {
            const user = await userRepository.getUserByUsernumber(userNumber);
            if (!user) {
                throw new Error('User cannot be found');
            }
            const userProducts = await ProductRepository.getUserProducts(userNumber);
            if (!userProducts || userProducts.length === 0) {
                throw new Error('User doesnot have any products');
            }
            return userProducts;
        } catch (error) {
            console.error('Error in ProductService.getUserProducts:', error);
            throw new Error('Error fetching products');
        }
    }

    async listAllProducts() {
        try {
            return await ProductRepository.getAllProducts();
        } catch (error) {
            console.error('Error in ProductService.getAllProducts:', error);
            throw new Error('Error fetching products');
        }
    }

    async addUserProduct(userNumber: string, productNumber: string) {
        try {
            const existingProduct = await ProductRepository.getExistingProducts(userNumber, productNumber);

            if (existingProduct) {
                throw new Error('User already has this product!');
            }

            return await ProductRepository.createUserProductMap(userNumber, productNumber);
        } catch (error) {
            console.error('Error in UserProductMapService.addUserProduct:', error);
            throw new Error('Error adding user product');
        }
    }

    async getUserProductVulnerabilities(productNumber: string) {
        try {
            const productInfo = await ProductRepository.getProductInfo(productNumber);

            if (!productInfo) {
                throw new Error('There is no such product!');
            }

            const vulnerabilities = await vulnerabilityRepository.getVulnerabilitiesByProduct(productInfo.name);

            if (!vulnerabilities || vulnerabilities.length === 0) {
                throw new Error('There is no vulnerability!');
            }

            return vulnerabilities;
        } catch (error) {
            console.error('Error in UserProductMapService.addUserProduct:', error);
            throw new Error('Error adding user product');
        }
    }
}

export default new ProductService();
